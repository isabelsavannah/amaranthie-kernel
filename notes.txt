Central pub/sub for kernel messages
  and also local applications can hook into it

We use localpeers only for initial discovery/hooking into the network; everything else is done over graphql (which is advertised both by crdt and by local peers)

We're in the business of providing messging/querying to protocols as a service. we have to be. so, we do subscriptions from stwarberry, since that's supported. 

subscriptions to topics gets you unsolicited messaging.
subscriptions to paths gets you single-source crdt state, instead of replicating it everywhere. 
a common graphql-level interface that signals to the client to request a subscription, exposed to the client as a query response.

get ten raspberry pis, run 16 kernels on each of them. fuck it; if i'm gonna do this, let it be fun, right?

have a bare-metal thing, written in plain python, that runs on every entity. it manages shutdowns, it talks to docker and starts a kernel container if appropriate for this machine. inside containers, it offers pipes to parent, etc.

crdts don't have to be kept in memory if it all understands itself in a tree

fuck it, let's just do kademlia for our global db, is'nt this supposed to be fun? 
and if we run 10 agents per host, we definitely have the size for it

local_peers considered harmful. On top of the difficulties with actually
getting multiple events for one udp broadcast on one host, it looks like even
recieving broadcasts at all is messy. 

So, lift that out to the bare metal agent. Let that do anything that doesn't
decouple well from hardware, like broadcasting apparently. That agent is
responsible for starting the kernel instances, so it can easily advertise what
instances it hosts. Don't bother trying to include ids, just share endpoints
and let them handshake on their own - great place to put the auth, too

bare metal agent can just aggregate adds it recieves, drop them after a
timeout, and then write them to a file all the agents can read. Don't bother
trying to communicate anything the other way.

For now, just replace localpeers with a hardcoded list to mock what the runner
would be providing; would like to get crtds really working before dealing with
docker

Listen on a UDP socket to inject traffic to the central bus. Design is already
to have multiple entrances to that pipe, no reason to make protocols with a lot
of round trips do an http each time.

gonna need an init concept, we're gonna have a bunch of different long running
activities. Maybe an activity class for lifecycle tracking?
